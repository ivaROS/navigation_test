<launch>
  <arg name="world_file" default="$(find nav_configs)/world/fourth_floor.world"/>
  <arg name="gui" default="false"/>
  <arg name="manual" default="false"/>

  <!--BEGIN turtlebot_gazebo turtlebot_world.launch -->


    <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
    <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 

    <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
    <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 


    <!--BEGIN gazebo_ros empty_world.launch-->
      <!-- these are the arguments you can pass this launch file, for example paused:=true -->
      <arg name="paused" default="false"/>
      <arg name="use_sim_time" default="true"/>
      <arg name="extra_gazebo_args" default=""/>
      <arg name="recording" default="false"/>
      <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
           rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
           launch files, but it does nothing. -->
      <arg name="headless" default="false"/>
      <arg name="debug" default="false"/>
      <arg name="physics" default="ode"/>
      <arg name="verbose" default="false"/>
      <arg name="respawn_gazebo" default="false"/>
      <arg name="use_clock_frequency" default="false"/>
      <arg name="pub_clock_frequency" default="100"/>

      <!-- set use_sim_time flag -->
      <group if="$(arg use_sim_time)">
        <param name="/use_sim_time" value="true" />
      </group>

      <!-- set command arguments -->
      <arg unless="$(arg paused)" name="command_arg1" value=""/>
      <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
      <arg unless="$(arg recording)" name="command_arg2" value=""/>
      <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
      <arg unless="$(arg verbose)" name="command_arg3" value=""/>
      <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
      <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
      <arg     if="$(arg debug)" name="script_type" value="debug"/>

      <!-- start gazebo server-->
      <group if="$(arg use_clock_frequency)">
        <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
      </group>
      <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	    args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_file)" required="true"/>
	
      <!-- start gazebo client -->
      <group if="$(arg gui)">
        <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
      </group>

    <!--END gazebo_ros empty_world.launch-->


    <!-- Quadrotor specific nodes: -->
    <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor_with_kinect.launch">
      <arg name="name" value="mobile_base"/>
    </include>
  
  <arg name="robot_model" default="$(find nav_configs)/robots/quadrotor_kinect_simplified.urdf.xacro"/>
  <arg name="urdf_file2" default="$(find xacro)/xacro $(arg robot_model) --inorder" />
  <param name="/simplified_robot_description" command="$(arg urdf_file2)" />
  
    <node name="map_world_tf" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 map world " required="true"/>
    <node name="map_odom_tf" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 map odom " required="true"/>
    <node name="altitude_controller" pkg="quadrotor_interface" type="quadrotor_altitude_controller.py" required="true"/>
    <node name="odom_relay" pkg="topic_tools" type="relay" args="ground_truth/state odom" required="true"/>
  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"  required="true"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager"  required="true">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>
  
  
  
  <node name="map" pkg="map_server" type="map_server" args="$(find nav_configs)/maps/fourth_floor_gazebo.yaml" required="true" unless="$(arg manual)"/>

  
  <node name="map_publisher" pkg="gazebo_utils" type="map_publisher" if="$(arg manual)">
    <param name="world_file" value="$(arg world_file)"/>
    <param name="grey_walls" value="true"/>
    <param name="update_freq" value="1.0"/>
  </node>
  
  <node name="bumper_collision_detector" pkg="nav_scripts" type="bumper_collision_detector.py" required="true"/>


</launch>
