<launch>
  <arg name="world_file" default="$(find nav_configs)/world/empty_room_20x20.world"/>
  <arg name="gui" default="true"/>

  <arg name="robot_model" default="'$(find nav_configs)/robots/pioneer3at.urdf.xacro'"/>
  
  
    <!-- Different files for different sensors: hokuyo, realsense, stereo -->
    <arg name="robot"      value="pioneer3at"/> 
    <arg name="3d_sensor" value="stereo"/>  

  <!--BEGIN turtlebot_gazebo turtlebot_world.launch -->


    <!--BEGIN gazebo_ros empty_world.launch-->
      <!-- these are the arguments you can pass this launch file, for example paused:=true -->
      <arg name="paused" default="false"/>
      <arg name="use_sim_time" default="true"/>
      <arg name="extra_gazebo_args" default=""/>
      <arg name="recording" default="false"/>
      <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
           rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
           launch files, but it does nothing. -->
      <arg name="headless" default="false"/>
      <arg name="debug" default="false"/>
      <arg name="physics" default="ode"/>
      <arg name="verbose" default="false"/>
      <arg name="respawn_gazebo" default="false"/>
      <arg name="use_clock_frequency" default="false"/>
      <arg name="pub_clock_frequency" default="100"/>

      <!-- set use_sim_time flag -->
      <group if="$(arg use_sim_time)">
        <param name="/use_sim_time" value="true" />
      </group>

      <!-- set command arguments -->
      <arg unless="$(arg paused)" name="command_arg1" value=""/>
      <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
      <arg unless="$(arg recording)" name="command_arg2" value=""/>
      <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
      <arg unless="$(arg verbose)" name="command_arg3" value=""/>
      <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
      <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
      <arg     if="$(arg debug)" name="script_type" value="debug"/>

      <!-- start gazebo server-->
      <group if="$(arg use_clock_frequency)">
        <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
      </group>
      <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	    args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_file)" required="true"/>
	
      <!-- start gazebo client -->
      <group if="$(arg gui)">
        <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
      </group>

    <!--END gazebo_ros empty_world.launch-->

    <!--BEGIN turtlebot_gazebo kobuki.launch.xml-->
      <arg name="urdf_file" default="$(find xacro)/xacro $(arg robot_model) --inorder" />
      <param name="robot_description" command="$(arg urdf_file)" />
      
      <arg name="urdf_file2" default="$(find xacro)/xacro $(arg robot_model) --inorder details:=false" />
      <param name="simplified_robot_description" command="$(arg urdf_file2)" />
      
      <!-- Gazebo model spawner -->
      <node name="spawn_robot_model" pkg="gazebo_ros" type="spawn_model"
            args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model mobile_base"/>
      

    <arg name="pkg_gazebo_worlds" default="$(find p3at_tutorial)"/>


    <env name="GAZEBO_MODEL_PATH" value="$(arg pkg_gazebo_worlds)/models:$(optenv GAZEBO_MODEL_PATH)"/>
     <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"  required="true">
      <param name="publish_frequency" type="double" value="30.0" />
    </node>
    
    <!-- TODO: add pointcloud nodelet: -->
    <!--rosrun nodelet nodelet standalone depth_image_proc/point_cloud_xyz camera_info:=/realsense/camera/depth/camera_info image_rect:=/realsenscamera/depth/image_raw points:=/realsense/depth/points -->

    
    <!-- Velocity muxer -->
      <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"  required="true"/>
      <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
            args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager"  required="true">
        <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
        <remap from="cmd_vel_mux/output" to="cmd_vel"/>
      </node>
    
    <!-- Fake laser -->
    <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"  required="true"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
          args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager"  required="true">
      <param name="scan_height" value="10"/>
      <param name="output_frame_id" value="depth"/> 
      <param name="range_min" value="0.45"/>
      <remap from="image" to="/realsense/camera/depth/image_raw"/>
      <remap from="scan" to="/scan"/>
    </node>

  <!--END turtlebot_gazebo turtlebot_world.launch -->

  <!-- rosrun nodelet nodelet standalone depth_image_proc/point_cloud_xyz image_rect:=/realsense/camera/depth/image_raw camera_info:=/realsense/camera/depth/camera_info -->

  <node name="base_link_footprint_tf" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 base_link base_footprint"/>

  <node name="map" pkg="map_server" type="map_server" args="$(find nav_configs)/maps/empty_room_20x20.yaml" required="true"/>

  <node name="map_odom_publisher" pkg="gazebo_fake_localization" type="gazebo_fake_localization" required="true">
    <param name="base_frame_id" value="base_link"/>
  </node>

</launch>
