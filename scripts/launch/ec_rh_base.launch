<launch>
  <arg name="use_recovery_behaviors"/>
  <arg name="method"/>
  <arg name="num_paths" default="0"/>
  <arg name="num_inferred_paths" default="0"/>
  <arg name="model_name"/>
  <arg name="use_model"/>
  
  
  <arg name="gazebo" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="pips_namespace" default="/move_base/PipsDWAPlannerROS"/>
  
  <arg name="egocylindrical_image" default="/egocylinder/image"/>
  <arg name="egocylindrical_info" default="/egocylinder/data"/>
  
  <arg name="launch_prefix" default="xterm -e gdb --args" if="$(arg debug)"/>
  <arg name="launch_prefix" default="" unless="$(arg debug)"/>
  
  
  <arg name="depth_image_raw" default="/camera/depth/image_raw"/>
  <arg name="depth_info_raw" default="/camera/depth/camera_info"/>
  <arg name="rgb_image_raw" default="/camera/rgb/image_raw"/>
  
  <arg name="depth_image_topic" value="$(arg depth_image_raw)" if="$(arg gazebo)"/>
  <arg name="depth_info_topic" value="$(arg depth_info_raw)" if="$(arg gazebo)"/>
  
  <arg name="depth_image" default="$(arg depth_image_topic)"/>
  <arg name="depth_info" default="$(arg depth_info_topic)"/>
  
  <arg name="launch_prefix" default="xterm -e gdb --args" if="$(arg debug)"/>
  <arg name="launch_prefix" default="" unless="$(arg debug)"/>

  <arg name="decimation"        default="4"/>
  <arg name="decimated_image"   default="/camera/depth_decimated/image_raw"/>
  <arg name="decimated_info"    default="/camera/depth_decimated/camera_info"/>

  <include file="$(find depth_learning)/launch/decimation.launch" if="$(arg use_model)">
    <arg name="image_in"        value="$(arg depth_image)"/>
    <arg name="info_in"         value="$(arg depth_info)"/>
    <arg name="image_out"       value="$(arg decimated_image)"/>
    <arg name="info_out"        value="$(arg decimated_info)"/>
    <arg name="decimation"      value="$(arg decimation)"/>
  </include>
  
  

  <node name="predictive_service_provider" pkg="depth_learning" type="predictive_service.py" output="screen" if="$(arg use_model)">
    <param name="~datastats_filepath" value="/media/justin/data/justin/bag_files/depth_learning/training.bag"/>
    <param name="~model_filepath" value="$(find dl_models)/temp_downloads/$(arg model_name).pb"/>
    <remap from="image" to="$(arg decimated_image)"/>
  </node>

  <!--<include file="$(find egocylindrical)/launch/nodelets.launch"/>-->

  <!-- <include file="$(find turtlebot_navigation)/launch/includes/velocity_smoother.launch.xml"/> -->
    
  <node name="turtlebot_controller_node" pkg="turtlebot_trajectory_controller" type="trajectory_controller_node" output="screen" >
    <remap from="turtlebot_controller_node/trajectory_controller/desired_trajectory" to="/move_base/PipsDWAPlannerROS/paths"/>
    <remap from="turtlebot_controller_node/trajectory_controller/disable" to ="/move_base/PipsDWAPlannerROS/disable"/>
    <remap from="turtlebot_controller_node/trajectory_controller/enable" to="/move_base/PipsDWAPlannerROS/enable"/>
    <!-- <remap from="cmd_vel_mux/input/navi" to="navigation_velocity_smoother/raw_cmd_vel"/> -->
  </node>
  
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" clear_params="true" launch-prefix="$(arg launch_prefix)">
      <rosparam file="$(find nav_configs)/config/common_costmap_params.yaml" command="load" ns="global_costmap"/>
      
      <!-- Temporary, to be replaced with depth template -->
      <rosparam file="$(find nav_configs)/config/common_costmap_params.yaml" command="load" ns="local_costmap"/> 

      <rosparam file="$(find nav_configs)/config/local_costmap_params.yaml" command="load"/>
      <rosparam file="$(find nav_configs)/config/global_costmap_params.yaml" command="load"/>

      <rosparam file="$(find nav_configs)/config/move_base_params.yaml" command="load"/>
      <rosparam file="$(find nav_configs)/config/navfn_global_planner_params.yaml" command="load"/>
      
      <param name="base_local_planner" value="informed_pips_dwa/PipsDWAPlannerROS"/>
      
      <rosparam file="$(find nav_configs)/config/pips_dwa_local_planner_common_params.yaml" command="load" ns="PipsDWAPlannerROS"/>
      <rosparam file="$(find nav_configs)/config/local_planner_common_params.yaml" command="load" ns="PipsDWAPlannerROS"/>
      
      <rosparam file="$(find nav_configs)/config/custom_recovery_params.yaml" command="load" if="$(arg use_recovery_behaviors)"/>
      <param name="recovery_behavior_enabled" value="false" unless="$(arg use_recovery_behaviors)"/>
      
      <!-- <rosparam file="$(find informed_pips_dwa)/param/pips_dwa_local_planner_params.yaml" command="load"/> -->

      <!--<remap from="/move_base/PipsDWAPlannerROS/lpi/egocylindrical_image_cc_wrapper/egocylindrical_image_collision_checker/collisions" to="/collisions"/> -->
      
      <remap from="/cmd_vel" to="/cmd_vel_mux/input/navi"/>
      <param name="PipsDWAPlannerROS/lpi/egocylindrical_image_cc_wrapper/egocylindrical_image_topic" value="$(arg egocylindrical_image)" />
      <param name="PipsDWAPlannerROS/lpi/egocylindrical_image_cc_wrapper/egocylindrical_info_topic" value="$(arg egocylindrical_info)" />
      <remap from="$(arg pips_namespace)/odom" to="/odom"/>
      <remap from="$(arg pips_namespace)/get_confidences" to="/get_confidences"/>

      <param name="approach_method" value="$(arg method)"/>
      <param name="num_paths" value = "$(arg num_paths)"/>
      <param name="num_inferred_paths" value = "$(arg num_inferred_paths)"/>
      
      <param name="PipsDWAPlannerROS/lpi/egocylindrical_image_cc_wrapper/egocylindrical_image_collision_checker/model_type" value="6"/>
      
      <!-- <rosparam file="$(find informed_pips_dwa)/param/cchecker.yaml" command="load" ns="$(arg pips_namespace)/lpi/PipsCollisionChecker"/> -->

  </node> 
</launch>
